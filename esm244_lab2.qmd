---
title: "ESM 244 Lab 2 - Time Series"
author: "Zoe Sims"
format: 
  html:
    code-fold: show
    toc: true
    number-sections: true
editor: visual
execute:
  echo: true
  message: false
  warning: false
---

```{r setup}

library(tidyverse)
library(here)
library(tsibble)
library(feasts)
library(fable)
```

# Part 1: Time series with Toolik Lake data

### Load in the data

```{r}
toolik_df <- read_csv(here('data/toolik_daily.csv'))

```

### Convert data frame to time series

```{r}
toolik_ts <- toolik_df %>% mutate(date = 
                                    lubridate::mdy(date)) %>%
  as_tsibble(key = NULL, # if we had multiple sites, key by site
             index = date) # time series vairable. 
## R now knows that this is a time-series dataset, 
# with the 'date' column giving the index.

ggplot(toolik_ts, aes(x = date, y = daily_air_temp)) + 
  geom_line() +
  labs(x = "Date", y = "Mean daily air temp (degrees C) \n in Toolik Lake Station")

```


## Use filter_index() function to filter by date/time

```{r}
### Filter

toolik_ts %>%
  filter_index("2010-12" ~ "2011-01")

```

## Use index_by() to aggregate time series by increments

```{r}

toolik_month <- toolik_ts %>%
  index_by(yr_mo = ~yearmonth(.)) %>%
  summarize(monthly_mean_temp = mean(daily_air_temp), na.rm = TRUE) %>%
  ungroup()
# group by all combinations of year + month
# yearweek is also an option

```

```{r}
ggplot(data = toolik_month, aes(x = yr_mo, y = monthly_mean_temp)) +
  geom_line()

ggplot(toolik_month, aes(x = year(yr_mo), y = monthly_mean_temp)) +
  geom_line() +
  facet_wrap(~month(yr_mo, label = TRUE)) +
  labs(x = "Year", y = "Annual mean air temp (C)", 
       title = "Toolik Station Mean Annual Air Temperature",
       subtitle = "1988-2023", caption = "<put citation here>")

```


# Part 2: Time series wrangling and forecasting!

Energy usage by sector, in trillions of BTU's.

```{r}
energy_df <- read_csv(here('data', 'energy.csv'))

```


### Analysis goals:

* Examine patterns & trends in residential energy consumption over time.

* Predict what residential energy use patterns will look like over the next five years.

### Pseudocode

- convert year-month to date

- filter so it's just residential energy 

- look for trend (like a regression over all the years)

-- remove that trend

- look for seasonality (fit a regression to the data once it's stacked by month)

- - group by month -> summarise -> line of fit?

- look for cyclicality? 



```{r}
energy_ts <- energy_df %>% 
  mutate(date = tsibble::yearmonth(yrmonth)) %>%
  as_tsibble(key = sector, # if we had multiple sites, key by site
             index = date)

```


```{r}
ggplot(energy_ts, aes(x = date, y = energy_total, color = sector)) +
  geom_line() +
  labs("Date", y = "Total energy consumption by sector \n (Trillion BTU)") +
  facet_wrap(~ sector, ncol = 1, scales = "free")

```

* Residential looks similar to commercial, upward trend, maybe leveling off

* Seasonality - summer and winter peaks, summer peaks seem to be getting larger over time

### Season plot

```{r}
energy_ts %>% filter(sector == "residential") %>%
  gg_season(y = energy_total, 
            pal = hcl.colors(n=9)) +
  theme_light() +
  labs(x = "Month", y = "Residential energy consumption (Trillion BTU)")


energy_ts %>% gg_subseries(y = energy_total)

```


## Decomposition

The summer peak increases over time

STL = Seasonal + Trend + Loess (Locally-estimated scatterplot season). (LOESS is similar to exponential smoothing.)

```{r}
### Find the STL Decomposition

dcmp <- energy_ts %>%
  filter(sector == "residential") %>%
  model(feasts::STL(
    energy_total ~ 
      season(period = '1 year') + # seasonal component
      trend(window = 49))) # trend component
# wider window expands the alpha of how many timepoints before/after are being considered

components(dcmp) %>%
  autoplot()

```

### Plot autocorrelation function

```{r}
energy_ts %>%
  filter(sector == "residential") %>%
  ACF(energy_total) %>%
  autoplot()
```

## Forecasting by Holt Winters exponential smoothing.
Specify method for each component, whether "none", "additive', or "multiplicative."

```{r}
### Create a model
energy_fit <- energy_ts %>%
  filter(sector == "residential") %>%
  filter_index('2000-01' ~ .) %>% # from 2000 till now
  model(ets = ETS(energy_total ~ season(method = "M") + 
                    trend(method = "A"))) # Exponential time series smoothing

energy_forecast <- energy_fit %>%
  forecast(h = "5 years") # time horizon = 5 years

energy_forecast %>% 
  autoplot() # plot just the forecast

energy_forecast %>% 
  autoplot(energy_ts) # append the current data

```



```{r}
energy_predicted <- energy_fit %>%
  broom::augment() 
# add column with modeled values for the past

# View residuals
ggplot(energy_predicted) +
  geom_line(aes(x = date, y = energy_total)) +
  geom_line(aes(x = date, y = .fitted), 
            color = "red", alpha = 0.7)

ggplot(energy_predicted, aes(x = .resid)) +
  geom_histogram()
# Looks decently Normal, cool

  geom_line(aes(x = date, y = energy_total)) +
  geom_line(aes(x = date, y = .fitted), 
            color = "red", alpha = 0.7)

```


